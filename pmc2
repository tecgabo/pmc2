# Importa√ß√µes necess√°rias
import streamlit as st
from PIL import Image, ImageDraw, ImageFont
import io
import datetime
import textwrap
import base64
from fpdf import FPDF  # Para gera√ß√£o de PDF profissional
import json  # Para salvar projetos
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Project Model Canvas - TecVit√≥ria",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Cores e estilos atualizadas
COLORS = {
    "primary": "#003366",
    "secondary": "#FF6600",
    "accent": "#00CCCC",
    "background": "#F5F5F5",
    "text": "#333333",
    "success": "#28a745",
    "warning": "#ffc107",
    "danger": "#dc3545"
}

# URL do logo da TecVit√≥ria
TECVITORIA_LOGO = "https://tecvitoria.com.br/wp-content/uploads/2025/04/logo-amarelo.webp"

# Templates atualizados e expandidos
TEMPLATES = {
    "Selecione um template": {k: "" for k in [
        'justificativas', 'pitch', 'produto', 'stakeholders', 'premissas', 'riscos', 
        'objetivos', 'requisitos', 'equipe', 'entregas', 'cronograma', 'beneficios', 
        'restricoes', 'custos', 'observacoes']},
    
    "Projeto de Inova√ß√£o": {
        'justificativas': "‚Ä¢ Mercado em transforma√ß√£o digital\n‚Ä¢ Concorr√™ncia lan√ßou novo produto",
        'pitch': "Desenvolvimento de plataforma integrada de gest√£o para PMEs.",
        'produto': "‚Ä¢ Plataforma SaaS modular\n‚Ä¢ Integra√ß√£o com bancos e marketplaces",
        'stakeholders': "‚Ä¢ Diretoria Executiva\n‚Ä¢ L√≠deres de departamento",
        'premissas': "‚Ä¢ Equipe permanecer√° alocada\n‚Ä¢ Or√ßamento aprovado",
        'riscos': "‚Ä¢ Atraso na aprova√ß√£o [Prob: M√©dia] [Impacto: Alto]",
        'objetivos': "‚Ä¢ Lan√ßar MVP at√© 30/09/2024\n‚Ä¢ Captar 100 clientes em 6 meses",
        'requisitos': "[MUST] Integra√ß√£o com bancos\n[MUST] Seguran√ßa de dados\n[SHOULD] Interface mobile",
        'equipe': "‚Ä¢ GP: Ana Silva\n‚Ä¢ Tech Lead: Carlos Souza\n‚Ä¢ UX: Mariana Costa",
        'entregas': "1. Especifica√ß√£o t√©cnica\n2. M√≥dulo financeiro\n3. Painel administrativo",
        'cronograma': "‚Ä¢ F1 (M1-2): Especifica√ß√£o\n‚Ä¢ F2 (M3-5): Desenvolvimento\n‚Ä¢ F3 (M6): Testes",
        'beneficios': "‚Ä¢ Redu√ß√£o de 30% em processos manuais\n‚Ä¢ Ganho de produtividade",
        'restricoes': "‚Ä¢ Or√ßamento: R$ 1.8M\n‚Ä¢ Prazo: 7 meses\n‚Ä¢ Equipe: 5 pessoas",
        'custos': "‚Ä¢ Desenvolvimento: R$ 1.2M\n‚Ä¢ Infra: R$ 300k\n‚Ä¢ Marketing: R$ 200k",
        'observacoes': "Parceria com universidade para pesquisa de UX"
    },
    
    "Evento Corporativo": {
        'justificativas': "‚Ä¢ Alinhamento da equipe\n‚Ä¢ Lan√ßamento de novo produto",
        'pitch': "Realiza√ß√£o de evento anual para 300 colaboradores com foco em inova√ß√£o.",
        'produto': "‚Ä¢ Evento presencial de 2 dias\n‚Ä¢ Palestras e workshops",
        'stakeholders': "‚Ä¢ CEO\n‚Ä¢ RH\n‚Ä¢ Comunica√ß√£o\n‚Ä¢ Fornecedores",
        'premissas': "‚Ä¢ Local dispon√≠vel\n‚Ä¢ Data aprovada",
        'riscos': "‚Ä¢ Baixa ades√£o [Prob: Baixa] [Impacto: M√©dio]",
        'objetivos': "‚Ä¢ 80% de satisfa√ß√£o\n‚Ä¢ 95% de participa√ß√£o",
        'requisitos': "[MUST] Streaming ao vivo\n[MUST] Acessibilidade",
        'equipe': "‚Ä¢ Coordenador: Jo√£o Silva\n‚Ä¢ Log√≠stica: Maria Souza",
        'entregas': "1. Plano de evento\n2. Contrata√ß√£o de palestrantes",
        'cronograma': "‚Ä¢ M1: Planejamento\n‚Ä¢ M2: Divulga√ß√£o\n‚Ä¢ M3: Execu√ß√£o",
        'beneficios': "‚Ä¢ Engajamento da equipe\n‚Ä¢ Alinhamento estrat√©gico",
        'restricoes': "‚Ä¢ Or√ßamento: R$ 150k\n‚Ä¢ Data fixa: 15/11",
        'custos': "‚Ä¢ Local: R$ 50k\n‚Ä¢ Palestrantes: R$ 40k",
        'observacoes': "Poss√≠vel patroc√≠nio externo"
    }
}

# CSS personalizado atualizado
st.markdown(f"""
<style>
    .stApp {{
        background-color: {COLORS['background']};
    }}
    .header {{
        background: linear-gradient(135deg, {COLORS['primary']}, {COLORS['accent']});
        color: white;
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }}
    .sidebar-logo {{
        margin-bottom: 1.5rem;
        text-align: center;
    }}
    .required-field::after {{
        content: " *";
        color: {COLORS['danger']};
    }}
    .template-card {{
        background-color: white;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid {COLORS['secondary']};
        transition: transform 0.2s;
    }}
    .template-card:hover {{
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }}
    .guide-section {{
        background-color: white;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }}
    .canvas-container {{
        background-color: white;
        border-radius: 10px;
        padding: 2rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }}
    .stButton>button {{
        background-color: {COLORS['primary']};
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        transition: all 0.3s;
    }}
    .stButton>button:hover {{
        background-color: {COLORS['secondary']};
        transform: scale(1.02);
    }}
    .risk-high {{
        color: {COLORS['danger']};
        font-weight: bold;
    }}
    .risk-medium {{
        color: {COLORS['warning']};
        font-weight: bold;
    }}
    .risk-low {{
        color: {COLORS['success']};
    }}
    .tab-content {{
        padding: 1.5rem 0;
    }}
</style>
""", unsafe_allow_html=True)

# Fun√ß√£o para gerar o canvas visual melhorado
def generate_canvas(data):
    # Criar uma imagem em branco (A3 em 300dpi)
    img = Image.new('RGB', (3508, 2480), color=(255, 255, 255))
    d = ImageDraw.Draw(img)
    
    try:
        title_font = ImageFont.truetype("arial.ttf", 72)
        section_font = ImageFont.truetype("arial.ttf", 48)
        content_font = ImageFont.truetype("arial.ttf", 36)
    except:
        title_font = ImageFont.load_default()
        section_font = ImageFont.load_default()
        content_font = ImageFont.load_default()
    
    # T√≠tulo
    d.text((100, 100), f"Project Model Canvas", font=title_font, fill=COLORS['primary'])
    d.text((100, 200), f"Projeto: {data.get('nome_projeto', '')}", font=title_font, fill=COLORS['primary'])
    d.text((100, 300), f"Respons√°vel: {data.get('responsavel', '')} | Data: {data.get('data', '')}", 
           font=content_font, fill=COLORS['text'])
    
    # Desenhar grid do canvas (9 quadrantes)
    # Linhas horizontais
    d.line([(100, 500), (3408, 500)], fill=COLORS['primary'], width=5)
    d.line([(100, 1500), (3408, 1500)], fill=COLORS['primary'], width=5)
    
    # Linhas verticais
    d.line([(1200, 500), (1200, 2480)], fill=COLORS['primary'], width=5)
    d.line([(2300, 500), (2300, 2480)], fill=COLORS['primary'], width=5)
    
    # Preencher quadrantes
    sections = [
        # Linha 1
        {"pos": (150, 550), "title": "Justificativas", "content": data.get('justificativas', '')},
        {"pos": (1250, 550), "title": "Pitch", "content": data.get('pitch', '')},
        {"pos": (2350, 550), "title": "Produto/Servi√ßo", "content": data.get('produto', '')},
        
        # Linha 2
        {"pos": (150, 1550), "title": "Stakeholders", "content": data.get('stakeholders', '')},
        {"pos": (1250, 1550), "title": "Premissas", "content": data.get('premissas', '')},
        {"pos": (2350, 1550), "title": "Riscos", "content": data.get('riscos', '')},
        
        # Linha 3
        {"pos": (150, 2100), "title": "Objetivos", "content": data.get('objetivos', '')},
        {"pos": (1250, 2100), "title": "Requisitos", "content": data.get('requisitos', '')},
        {"pos": (2350, 2100), "title": "Equipe", "content": data.get('equipe', '')}
    ]
    
    for section in sections:
        x, y = section['pos']
        # T√≠tulo da se√ß√£o
        d.text((x, y), section['title'], font=section_font, fill=COLORS['secondary'])
        
        # Conte√∫do da se√ß√£o (com quebra de linha)
        y += 80
        for line in section['content'].split('\n'):
            d.text((x, y), line, font=content_font, fill=COLORS['text'])
            y += 50
    
    return img

# Fun√ß√£o para gerar PDF profissional
def generate_pdf(data):
    pdf = FPDF(orientation='L', unit='mm', format='A3')
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    
    # Configura√ß√µes de fonte
    pdf.add_font('Arial', '', 'arial.ttf', uni=True)
    pdf.set_font('Arial', '', 12)
    
    # Cabe√ßalho
    pdf.set_font('Arial', 'B', 24)
    pdf.cell(0, 15, "Project Model Canvas", 0, 1, 'C')
    pdf.set_font('Arial', 'B', 18)
    pdf.cell(0, 15, f"Projeto: {data.get('nome_projeto', '')}", 0, 1, 'C')
    pdf.set_font('Arial', '', 14)
    pdf.cell(0, 10, f"Respons√°vel: {data.get('responsavel', '')} | Data: {data.get('data', '')}", 0, 1, 'C')
    pdf.ln(10)
    
    # Configurar cores
    pdf.set_draw_color(0, 51, 102)  # Cor prim√°ria
    pdf.set_line_width(0.5)
    
    # Criar grid (3x3)
    col_width = pdf.w / 3 - 15
    row_height = pdf.h / 3 - 30
    
    sections = [
        {"title": "Justificativas", "content": data.get('justificativas', '')},
        {"title": "Pitch", "content": data.get('pitch', '')},
        {"title": "Produto/Servi√ßo", "content": data.get('produto', '')},
        {"title": "Stakeholders", "content": data.get('stakeholders', '')},
        {"title": "Premissas", "content": data.get('premissas', '')},
        {"title": "Riscos", "content": data.get('riscos', '')},
        {"title": "Objetivos", "content": data.get('objetivos', '')},
        {"title": "Requisitos", "content": data.get('requisitos', '')},
        {"title": "Equipe", "content": data.get('equipe', '')}
    ]
    
    for i in range(3):  # Linhas
        for j in range(3):  # Colunas
            x = 10 + j * (col_width + 5)
            y = 50 + i * (row_height + 5)
            
            # Desenhar caixa
            pdf.rect(x, y, col_width, row_height)
            
            # Adicionar t√≠tulo
            pdf.set_font('Arial', 'B', 16)
            pdf.set_xy(x + 5, y + 5)
            pdf.cell(col_width - 10, 10, sections[i*3 + j]['title'], 0, 1)
            
            # Adicionar conte√∫do
            pdf.set_font('Arial', '', 12)
            pdf.set_xy(x + 5, y + 20)
            pdf.multi_cell(col_width - 10, 8, sections[i*3 + j]['content'])
    
    # Se√ß√µes adicionais
    pdf.add_page()
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 10, "Detalhes Adicionais", 0, 1)
    pdf.ln(5)
    
    additional_sections = [
        {"title": "Entregas", "content": data.get('entregas', '')},
        {"title": "Cronograma", "content": data.get('cronograma', '')},
        {"title": "Benef√≠cios", "content": data.get('beneficios', '')},
        {"title": "Restri√ß√µes", "content": data.get('restricoes', '')},
        {"title": "Custos", "content": data.get('custos', '')},
        {"title": "Observa√ß√µes", "content": data.get('observacoes', '')}
    ]
    
    for i in range(0, len(additional_sections), 2):
        # Duas colunas
        if i < len(additional_sections):
            pdf.set_font('Arial', 'B', 14)
            pdf.cell(pdf.w / 2 - 10, 10, additional_sections[i]['title'], 0, 0)
            if i+1 < len(additional_sections):
                pdf.cell(pdf.w / 2 - 10, 10, additional_sections[i+1]['title'], 0, 1)
            else:
                pdf.ln()
            
            pdf.set_font('Arial', '', 12)
            pdf.multi_cell(pdf.w / 2 - 10, 8, additional_sections[i]['content'])
            pdf.set_xy(pdf.w / 2 + 10, pdf.get_y() - pdf.font_size * len(additional_sections[i]['content'].split('\n')))
            if i+1 < len(additional_sections):
                pdf.multi_cell(pdf.w / 2 - 10, 8, additional_sections[i+1]['content'])
            pdf.ln(10)
    
    # Rodap√©
    pdf.set_y(-15)
    pdf.set_font('Arial', 'I', 8)
    pdf.cell(0, 10, f"Gerado por TecVit√≥ria em {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}", 0, 0, 'C')
    
    return pdf.output(dest='S').encode('latin1')

# Fun√ß√£o para salvar projeto
def save_project(data, filename):
    with open(filename, 'w') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# Fun√ß√£o para carregar projeto
def load_project(filename):
    with open(filename, 'r') as f:
        return json.load(f)

# Inicializar session_state
if 'dados' not in st.session_state:
    st.session_state.dados = {
        'nome_projeto': '',
        'responsavel': '',
        'data': datetime.date.today().strftime("%d/%m/%Y"),
        'justificativas': '',
        'pitch': '',
        'produto': '',
        'stakeholders': '',
        'premissas': '',
        'riscos': '',
        'objetivos': '',
        'requisitos': '',
        'equipe': '',
        'entregas': '',
        'cronograma': '',
        'beneficios': '',
        'restricoes': '',
        'custos': '',
        'observacoes': ''
    }

# Sidebar atualizada
with st.sidebar:
    st.markdown(f"""
    <div class="sidebar-logo">
        <img src="{TECVITORIA_LOGO}" width="200" alt="TecVit√≥ria">
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("### Informa√ß√µes B√°sicas")
    
    st.session_state.dados['nome_projeto'] = st.text_input(
        "Nome do Projeto*",
        value=st.session_state.dados['nome_projeto'],
        help="Nome completo do projeto conforme registro oficial"
    )
    
    st.session_state.dados['responsavel'] = st.text_input(
        "Respons√°vel*",
        value=st.session_state.dados['responsavel'],
        help="Nome do gerente ou l√≠der do projeto"
    )
    
    data_input = st.date_input(
        "Data*",
        value=datetime.datetime.strptime(st.session_state.dados['data'], "%d/%m/%Y").date(),
        format="DD/MM/YYYY"
    )
    st.session_state.dados['data'] = data_input.strftime("%d/%m/%Y")
    
    st.markdown("---")
    st.markdown("### Gerenciamento de Projetos")
    
    # Upload de projeto existente
    uploaded_file = st.file_uploader("Carregar projeto salvo", type=['json'])
    if uploaded_file is not None:
        try:
            st.session_state.dados = load_project(uploaded_file)
            st.success("Projeto carregado com sucesso!")
        except Exception as e:
            st.error(f"Erro ao carregar projeto: {str(e)}")
    
    # Download do projeto atual
    if st.session_state.dados['nome_projeto']:
        project_json = json.dumps(st.session_state.dados, indent=2, ensure_ascii=False)
        st.download_button(
            label="üíæ Salvar Projeto",
            data=project_json,
            file_name=f"project_{st.session_state.dados['nome_projeto'].lower().replace(' ', '_')}.json",
            mime="application/json"
        )
    
    st.markdown("---")
    st.markdown("### Templates")
    
    selected_template = st.selectbox(
        "Carregar template:",
        list(TEMPLATES.keys()),
        help="Selecione um modelo pr√©-definido para iniciar seu canvas"
    )
    
    if st.button("Aplicar Template", key="apply_template") and selected_template != "Selecione um template":
        st.session_state.dados.update(TEMPLATES[selected_template])
        st.success(f"Template '{selected_template}' carregado com sucesso!")
    
    if st.button("üîÑ Limpar Formul√°rio", key="clear_form"):
        for key in st.session_state.dados:
            st.session_state.dados[key] = ""
        st.session_state.dados['data'] = datetime.date.today().strftime("%d/%m/%Y")
        st.rerun()

# P√°gina principal com abas
tab1, tab2, tab3, tab4 = st.tabs(["üìù Formul√°rio Completo", "üñºÔ∏è Visualiza√ß√£o do Canvas", "üìö Biblioteca de Templates", "‚ÑπÔ∏è Guia & Recursos"])

with tab1:
    st.markdown(f"### Formul√°rio do Projeto: {st.session_state.dados['nome_projeto'] or 'Sem nome'}")
    
    cols = st.columns(2)
    
    with cols[0]:
        st.markdown("#### üéØ Prop√≥sito do Projeto")
        st.session_state.dados['justificativas'] = st.text_area(
            "Justificativas*",
            value=st.session_state.dados['justificativas'],
            height=150,
            placeholder="Por que este projeto existe?\n‚Ä¢ Raz√£o 1\n‚Ä¢ Raz√£o 2"
        )
        
        st.session_state.dados['pitch'] = st.text_area(
            "Pitch*",
            value=st.session_state.dados['pitch'],
            height=100,
            placeholder="Resuma seu projeto em 1-2 frases impactantes"
        )
        
        st.session_state.dados['objetivos'] = st.text_area(
            "Objetivos*",
            value=st.session_state.dados['objetivos'],
            height=150,
            placeholder="O que o projeto deve alcan√ßar?\n‚Ä¢ Objetivo 1\n‚Ä¢ Objetivo 2"
        )
        
        st.markdown("#### üõ†Ô∏è O Que Ser√° Entregue")
        st.session_state.dados['produto'] = st.text_area(
            "Produto/Servi√ßo*",
            value=st.session_state.dados['produto'],
            height=150,
            placeholder="Descreva o produto/servi√ßo resultante\n‚Ä¢ Caracter√≠stica 1\n‚Ä¢ Caracter√≠stica 2"
        )
    
    with cols[1]:
        st.markdown("#### üë• Partes Interessadas")
        st.session_state.dados['stakeholders'] = st.text_area(
            "Stakeholders*",
            value=st.session_state.dados['stakeholders'],
            height=120,
            placeholder="Quem s√£o os principais interessados?\n‚Ä¢ Stakeholder 1\n‚Ä¢ Stakeholder 2"
        )
        
        st.markdown("#### üìã Especifica√ß√µes")
        st.session_state.dados['requisitos'] = st.text_area(
            "Requisitos*",
            value=st.session_state.dados['requisitos'],
            height=120,
            placeholder="[MUST] Requisito obrigat√≥rio\n[SHOULD] Requisito desej√°vel\n[COULD] Requisito opcional"
        )
        
        st.markdown("#### üöÄ Plano de Entrega")
        st.session_state.dados['entregas'] = st.text_area(
            "Entregas*",
            value=st.session_state.dados['entregas'],
            height=120,
            placeholder="Principais entregas/marcos\n1. Entrega 1\n2. Entrega 2"
        )
        
        st.session_state.dados['cronograma'] = st.text_area(
            "Cronograma*",
            value=st.session_state.dados['cronograma'],
            height=120,
            placeholder="Fases e prazos estimados\n‚Ä¢ Fase 1: M1-M2\n‚Ä¢ Fase 2: M3-M5"
        )
    
    st.markdown("#### üß≠ Contexto do Projeto")
    cols_context = st.columns(3)
    
    with cols_context[0]:
        st.session_state.dados['premissas'] = st.text_area(
            "Premissas",
            value=st.session_state.dados['premissas'],
            height=120,
            placeholder="Suposi√ß√µes iniciais\n‚Ä¢ Premissa 1\n‚Ä¢ Premissa 2"
        )
    
    with cols_context[1]:
        st.session_state.dados['riscos'] = st.text_area(
            "Riscos",
            value=st.session_state.dados['riscos'],
            height=120,
            placeholder="Poss√≠veis riscos e impactos\n‚Ä¢ Risco [Prob: Alta] [Impacto: Alto]"
        )
    
    with cols_context[2]:
        st.session_state.dados['restricoes'] = st.text_area(
            "Restri√ß√µes",
            value=st.session_state.dados['restricoes'],
            height=120,
            placeholder="Limita√ß√µes conhecidas\n‚Ä¢ Restri√ß√£o 1\n‚Ä¢ Restri√ß√£o 2"
        )
    
    st.markdown("#### üèóÔ∏è Estrutura do Projeto")
    cols_org = st.columns(3)
    
    with cols_org[0]:
        st.session_state.dados['equipe'] = st.text_area(
            "Equipe",
            value=st.session_state.dados['equipe'],
            height=120,
            placeholder="Membros principais\n‚Ä¢ Fun√ß√£o: Nome\n‚Ä¢ Fun√ß√£o: Nome"
        )
    
    with cols_org[1]:
        st.session_state.dados['beneficios'] = st.text_area(
            "Benef√≠cios",
            value=st.session_state.dados['beneficios'],
            height=120,
            placeholder="Benef√≠cios esperados\n‚Ä¢ Benef√≠cio 1\n‚Ä¢ Benef√≠cio 2"
        )
    
    with cols_org[2]:
        st.session_state.dados['custos'] = st.text_area(
            "Custos",
            value=st.session_state.dados['custos'],
            height=120,
            placeholder="Estimativa de custos\n‚Ä¢ Categoria: Valor\n‚Ä¢ Categoria: Valor"
        )
    
    st.session_state.dados['observacoes'] = st.text_area(
        "Observa√ß√µes Adicionais",
        value=st.session_state.dados['observacoes'],
        height=100,
        placeholder="Qualquer informa√ß√£o adicional relevante"
    )

with tab2:
    if st.session_state.dados['nome_projeto']:
        st.markdown(f"## Canvas do Projeto: {st.session_state.dados['nome_projeto']}")
        
        # Visualiza√ß√£o do canvas
        canvas_img = generate_canvas(st.session_state.dados)
        st.image(canvas_img, use_column_width=True)
        
        # Op√ß√µes de exporta√ß√£o
        st.markdown("### Exportar Canvas")
        col_export = st.columns(3)
        
        with col_export[0]:
            # Converter imagem para bytes para download
            img_byte_arr = io.BytesIO()
            canvas_img.save(img_byte_arr, format='PNG')
            st.download_button(
                label="üì§ Baixar Imagem (PNG)",
                data=img_byte_arr.getvalue(),
                file_name=f"canvas_{st.session_state.dados['nome_projeto'].lower().replace(' ', '_')}.png",
                mime="image/png"
            )
        
        with col_export[1]:
            # Gerar PDF
            pdf_bytes = generate_pdf(st.session_state.dados)
            st.download_button(
                label="üìÑ Baixar Relat√≥rio (PDF)",
                data=pdf_bytes,
                file_name=f"canvas_{st.session_state.dados['nome_projeto'].lower().replace(' ', '_')}.pdf",
                mime="application/pdf"
            )
        
        with col_export[2]:
            if st.button("üñ®Ô∏è Imprimir Canvas", key="print_canvas"):
                st.success("Use a fun√ß√£o de impress√£o do navegador (Ctrl+P) com a visualiza√ß√£o atual")
    else:
        st.warning("Por favor, preencha pelo menos o nome do projeto para visualizar o canvas.")

with tab3:
    st.markdown("## Biblioteca de Templates")
    st.markdown("Selecione um modelo pr√©-definido para acelerar seu planejamento:")
    
    for template_name, template_data in list(TEMPLATES.items())[1:]:
        with st.expander(f"üìå {template_name}", expanded=False):
            st.markdown(f"**Pitch:** {template_data['pitch']}")
            
            cols_template = st.columns(2)
            with cols_template[0]:
                st.markdown("**Principais Objetivos:**")
                st.markdown(f"> {template_data['objetivos'].replace('\n', '  \n> ')}")
                
                st.markdown("**Produto/Servi√ßo:**")
                st.markdown(f"> {template_data['produto'].replace('\n', '  \n> ')}")
            
            with cols_template[1]:
                st.markdown("**Entregas Principais:**")
                st.markdown(f"> {template_data['entregas'].replace('\n', '  \n> ')}")
                
                st.markdown("**Equipe:**")
                st.markdown(f"> {template_data['equipe'].replace('\n', '  \n> ')}")
            
            if st.button(f"Aplicar Template {template_name}", key=f"apply_{template_name}"):
                st.session_state.dados.update(template_data)
                st.success(f"Template '{template_name}' aplicado com sucesso!")
                st.rerun()

with tab4:
    st.markdown("""
    <div class="guide-section">
        <h2>üéØ O que √© o Project Model Canvas?</h2>
        <p>O Project Model Canvas √© uma ferramenta visual de planejamento estrat√©gico que permite organizar todos os elementos essenciais de um projeto em um √∫nico quadro, facilitando a comunica√ß√£o e o alinhamento entre todas as partes interessadas.</p>
    </div>
    """, unsafe_allow_html=True)
    
    with st.expander("üìå Como Usar o Canvas", expanded=True):
        st.markdown("""
        1. **Comece pelo Prop√≥sito**:
           - Preencha primeiro as se√ß√µes de Justificativas e Pitch para definir claramente o "porqu√™" do projeto
        
        2. **Detalhe o Que Ser√° Feito**:
           - Especifique o Produto/Servi√ßo, Objetivos e Requisitos
        
        3. **Planeje a Execu√ß√£o**:
           - Defina Entregas, Cronograma, Equipe e Recursos
        
        4. **Considere o Contexto**:
           - Identifique Stakeholders, Premissas, Riscos e Restri√ß√µes
        
        5. **Revise Regularmente**:
           - Atualize o canvas conforme o projeto evolui
        """)
    
    with st.expander("üìã Exemplo Completo", expanded=False):
        st.markdown("""
        **Projeto:** Plataforma de Educa√ß√£o Digital  
        
        **Justificativas:**  
        ‚Ä¢ Demanda por capacita√ß√£o remota  
        ‚Ä¢ Oportunidade de mercado em expans√£o  
        
        **Pitch:**  
        Plataforma SaaS de cursos profissionalizantes com certifica√ß√£o reconhecida.  
        
        **Objetivos:**  
        ‚Ä¢ Lan√ßar MVP em 6 meses  
        ‚Ä¢ 10.000 usu√°rios no primeiro ano  
        """)
    
    st.markdown("---")
    st.markdown("### üìö Recursos Adicionais")
    
    resources = [
        {"title": "üìñ Guia Completo do Canvas", "description": "Documenta√ß√£o detalhada de cada se√ß√£o", "url": "#"},
        {"title": "üé• V√≠deo Tutorial", "description": "Passo a passo para preencher o canvas", "url": "#"},
        {"title": "üìä Modelo em Excel", "description": "Vers√£o edit√°vel para download", "url": "#"}
    ]
    
    for resource in resources:
        with st.container(border=True):
            st.markdown(f"#### {resource['title']}")
            st.markdown(resource['description'])
            st.markdown(f"[Acessar recurso]({resource['url']})")

# Rodap√©
st.markdown("---")
st.markdown(f"""
<p style='text-align:center; color:{COLORS['primary']};'>
    ¬© 2024 TecVit√≥ria | Desenvolvido com Streamlit e Python
</p>
""", unsafe_allow_html=True)
